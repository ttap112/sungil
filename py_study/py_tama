import random
import time

Yes = ['Yes', 'yes', '네', '응', 'ㅇ', 'd','그래']
No = ['No', 'no', '아니요' , '아니' , 'ㄴ' , 's', '싫어']

hour = 0

Year = 0
Month = 0
Day = 0


# 초기설정

# 랜덤

# 시간경과.
def 시간경과():
    global hour
    if hour >= 24:
        hour = 0
    return hour


# 기능
def 기능선택():
    global hour
    while True:
        try:
            time.sleep(3)
            print('1.밥 먹기 \n2.놀기 \n3.영화보기 \n4.잠자기 \n5.씻기 \n6.상태 확인하기')
            print("-" * 50)
            time.sleep(1)

            choice = input("선택 : ")
            print("-" * 50)
            time.sleep(0.3)

            if choice == '1':
                pet.feed()
                hour += 6
                시간경과()
                continue

            elif choice == '2':
                pet.play()
                hour += 6
                시간경과()
                continue

            elif choice == '3':
                pet.movie()
                hour += 6
                시간경과()
                continue

            elif choice == '4':
                pet.sleep()
                break

            elif choice == '5':
                pet.wash()
                hour += 6
                시간경과()
                continue

            elif choice == '6':
                pet.stats()
            else:
                raise ValueError("에러 발생")

        except ValueError:
            print("다시 입력하십시오")
            print("-" * 50)
            time.sleep(1)


# 하루
def NextDay():
    print(f'{Year}년 {Month}월 {Day}일 경과 ')
    print("-" * 50)
    time.sleep(0.2)

    print("-" * 50)
    print(
        f'당신의 {pet.name} 상태 \n배고픔 : {pet.hungry} \n행복도 : {pet.happiness} \n스트레스 : {pet.stress} \n피곤함 : {pet.tired} \n'
        f'친밀도 : {pet.intimacy} \n감염도 : {pet.disease}')
    print("-" * 50)
    time.sleep(2)

    print(f'당신은 {pet.name}을 위해 무엇을 하시겠습까?')
    print("-" * 50)
    time.sleep(0.2)


class Tamagochi:
    def __init__(self, name):

        # 이름
        self.name = name

        # 배고픔
        self.hungry = 50

        # 스트레스
        self.stress = 50

        # 피곤함
        self.tired = 50

        # 행복도
        self.happiness = 50

        # 나이
        self.age = 0

        # 친밀도
        self.intimacy = 0

        # 질병
        self.disease = 0

    # 이름 문자열 변환
    def __str__(self):
        return self.name

    # 먹이
    def feed(self):
        self.hungry -= random.randint(5, 10)
        self.happiness += random.randint(1, 1)
        self.stress += random.randint(1, 2)
        self.tired += random.randint(1, 1)
        self.intimacy += random.randint(1, 2)
        self.disease += random.randint(-5, 5)
        if self.disease < 0:
            self.disease = 0
        time.sleep(1)
        print("변경되었습니다....")
        time.sleep(0.7)
        print("-" * 50)
        time.sleep(0.7)
        print(
            f'배고픔 : {self.hungry} \n행복도 : {self.happiness} \n스트레스 : {self.stress} \n피곤함 : {self.tired} \n친밀도 : {self.intimacy} \n감염도 : {self.disease}')
        print("-" * 50)
        time.sleep(0.7)

    # 놀이
    def play(self):
        self.hungry -= random.randint(1, 3)
        self.happiness += random.randint(2, 4)
        self.stress -= random.randint(3, 4)
        self.tired += random.randint(1, 3)
        self.intimacy += random.randint(1, 3)
        self.disease += random.randint(-10, 6)
        if self.disease < 0:
            self.disease = 0
        print("변경되었습니다....")
        time.sleep(0.7)
        print("-" * 50)
        time.sleep(0.7)
        print(
            f'배고픔 : {self.hungry} \n행복도 : {self.happiness} \n스트레스 : {self.stress} \n피곤함 : {self.tired} \n친밀도 : {self.intimacy} \n감염도 : {self.disease}')
        print("-" * 50)
        time.sleep(0.7)

    # 잠
    def sleep(self):
        self.hungry += random.randint(-3, -1)
        self.happiness += random.randint(3, 5)
        self.stress -= random.randint(2, 4)
        self.tired -= random.randint(4, 5)
        self.intimacy += random.randint(1, 3)
        self.disease += random.randint(-5, -1)
        if self.disease < 0:
            self.disease = 0
        print("변경되었습니다....")
        time.sleep(0.7)
        print("-" * 50)
        time.sleep(0.7)
        print(
            f'배고픔 : {self.hungry} \n행복도 : {self.happiness} \n스트레스 : {self.stress} \n피곤함 : {self.tired} \n친밀도 : {self.intimacy} \n감염도 : {self.disease}')
        print("-" * 50)
        time.sleep(0.7)

    # 샤워
    def wash(self):
        self.hungry += random.randint(-2, -1)
        self.happiness += random.randint(1, 2)
        self.stress += random.randint(1, 2)
        self.tired += random.randint(1, 1)
        self.intimacy += random.randint(1, 2)
        self.disease += random.randint(-10, 0)
        if self.disease < 0:
            self.disease = 0
        time.sleep(0.7)
        print("변경되었습니다....")
        time.sleep(0.7)
        print("-" * 50)
        time.sleep(0.7)
        print(
            f'배고픔 : {self.hungry} \n행복도 : {self.happiness} \n스트레스 : {self.stress} \n피곤함 : {self.tired} \n친밀도 : {self.intimacy} \n감염도 : {self.disease}')
        print("-" * 50)
        time.sleep(0.7)

    # 영화
    def movie(self):
        self.hungry += random.randint(-2, 1)
        self.happiness += random.randint(3, 5)
        self.stress -= random.randint(2, 5)
        self.tired += random.randint(1, 2)
        self.intimacy += random.randint(1, 2)
        self.disease += random.randint(-10, 6)
        if self.disease < 0:
            self.disease = 0
        print("-" * 50)
        time.sleep(0.7)
        print("변경되었습니다....")
        time.sleep(0.7)
        print("-" * 50)
        time.sleep(0.7)
        print(
            f'배고픔 : {self.hungry} \n행복도 : {self.happiness} \n스트레스 : {self.stress} \n피곤함 : {self.tired} \n친밀도 : {self.intimacy} \n감염도 : {self.disease}')

    # 스텟 확인
    def stats(self):
        print(
            f'이름 : {self.name} \n나이 : {self.age} \n배고픔 : {self.hungry} \n스트레스 : {self.stress} \n피곤함 : {self.tired} \n행복도 : {self.happiness} \n친밀도 : {self.intimacy} \n질병 감염도 : {self.disease}')
        print("-" * 50)
        time.sleep(3)


# 날짜
def calculate_year():
    global Day, Month, Year, hour

    if hour >= 24:
        hour = 0
        Day += 1

        print(f'{Year}년 {Month}월 {Day}일 경과 ')
        print("-" * 50)
        time.sleep(0.2)

    if Day >= 30:
        Month += 1
        Day = 0
        if Month >= 12:
            Year += 1
            Month = 0
    return Year, Month, Day, hour

# 죽음 이벤트

# 배고픔
def hungryDead():

    if pet.hungry == 0:
        print(f'당신의 펫은 엄청난 포만감을 느끼고 있다. | {pet.hungry}')
        time.sleep(0.2)
    if pet.hungry == 10:
        print(f'당신의 펫은 출출하지만 아직 배고프지 않은 것 같습니다. | {pet.hungry}')
        time.sleep(0.2)
    elif pet.hungry >= 40:
        print(f'당신의 펫이 약간의 배고픔을 느끼고 있습니다. | {pet.hungry} ')
        time.sleep(0.2)
    elif pet.hungry >= 70:
        print(f'당신의 펫이 매우 배고픈 상태입니다. | {pet.hungry}')
        time.sleep(0.2)
    elif pet.hungry >= 90:
        print(f'당신의 펫이 극심한 배고픔을 느끼고 있습니다. | {pet.hungry}')
        time.sleep(0.2)
    elif pet.hungry >= 100:
        print(f'당신의 펫이 배고픔으로 인하여 죽었습니다. | {pet.hungry}')
        time.sleep(0.2)
        exit()

# 행복도
def happninesEvent():
    if pet.happiness >= 100:
        print(f'당신의 펫은 지금 매우 행복한 상태입니다. | {pet.happiness}')
    elif pet.happiness <= 80:
        print(f'당신의 펫은 지금의 생활을 만족하고 있습니다. | {pet.happiness}')
    elif pet.happiness <= 60:
        print(f'당신의 펫은 지금의 생활을 괜찮다고 생각하지만 썩 좋다고는 느끼지 않고 있습니다. \n| {pet.happiness}')
    elif pet.happiness <= 25:
        print(f'당신의 펫은 현재의 생각보다 많이 불만을 가지고 있습니다. | {pet.happiness}')
    elif pet.happiness <=10:
        print(f'당신의 펫은 현재의 생활을 많은 불만을 펴하고 있습니다.')
    elif pet.happiness <=0:
        print(f'당신의 펫은 현재의 생활을 실증은 낸 나머지 그만 당신의 곁을 떠났습니다.')
        exit()


# 날짜마다 상태 변동
def randomStats():
    pet.stress += random.randint(1, 3)
    pet.hungry += random.randint(1, 4)
    pet.happiness -= random.randint(1, 4)
    pet.tired += random.randint(1, 4)

    return pet.hungry, pet.stress, pet.happiness, pet.tired

print("")
print("게임 시작 및 설명을 앞서 먼저 자신의 펫 이름을 정해주십시오.")
print("-" * 50)
time.sleep(0.5)

# 이름 선택
while True:
    pet_name = input("당신의 다마고치 이름을 설정 해주세요. : ")
    print("-" * 50)
    pet = Tamagochi(pet_name)

    time.sleep(0.5)
    cho = 0

    # 이름 결정
    while True:
        try:
            print(f'정말로 {pet.name} 으로 하시겠습니다  \n---선택하십시오.---')
            Choice = input("Yes | No : ")
            print("-" * 50)
            if Choice in Yes:
                print(f'당신의 다마고치의 이름은 {pet.name}입니다')
                print("-" * 50)
                time.sleep(0.5)
                cho += 1
                break
            elif Choice in No:
                print("펫 이름을 다시 설정합니다. ")
                print("-" * 50)
                time.sleep(0.5)
                cho = 0
                break
            else:
                raise ValueError("잘못 입력하였습니다.")
        except ValueError:
            print("잘못입력하였습니다. 다시 입력하시오.")
            print("-" * 50)
    if cho == 1:
        break

time.sleep(0.5)

# 게임 설명
while True:
    try:
        start_choice = input("게임 설명을 들을 실거면 1. \n게임 시작을 하실거면 2. \n선택 : ")
        print("-" * 50)
        time.sleep(0.3)

        # 게임 규칙
        if start_choice == "1":
            time.sleep(0.5)
            print("-" * 50)
            print(
                "다마고치는 펫 육성 시물레이션 게임이며 \n자신이 입력한 명령에 따라 펫이 그에 대한  \n출력을 하여 텍스트로 보여줍니다 \n그리고 행복도, 감염도, 배고픔, 스트레스 \n나이, 친밀도에 따라 여러 이벤트가 나오며 \n특정한 조건을 달성하면 펫이 죽을 수 도 있습니다.")
            print("-" * 50)
            time.sleep(3)

        # 게임 시작
        elif start_choice == "2":
            Year = 0
            Month = 0
            Day = 0
            print("게임을 시작합니다.")
            print("-" * 50)

            for i in range(100):  # 100부터 0까지
                print('\r로딩 중 : {0} {1}%'.format('█' * (i // 5), i), end='')
                time.sleep(0.1)
            break
        else:
            raise ValueError("에러 발생")
    except ValueError:
        print("잘못 입력하였습니다.")
        print("-" * 50)

print("")
print("-" * 50)

# 게임 시작
while True:
    print(f'{Year}년 {Month}월 {Day}일 경과 ')
    print("-" * 50)
    time.sleep(0.5)

    # 날짜 경과
    calculate_year()

    # 부화
    if Day == 15:

        print("알이 부화하였습니다.")
        print("-" * 50)
        time.sleep(0.3)

        print(f'{pet.name}은 세상에 처음 나와 당황하고 있습니다.')
        print("-" * 50)
        time.sleep(0.3)

        print(f'{pet.name} 위해 무엇을 하시겠습니까.')
        print("-" * 50)
        time.sleep(0.3)

        choice1_1 = 0
        # 선택 1-1
        while True:
            try:
                choice1 = input("1. 지켜보기 2. 조심스레 만져보기 \n선택 : ")
                print("-" * 50)

                if choice1 == '1' or choice1 == '2':
                    choice1_1 = choice1
                    break
                else:
                    raise ValueError("에러 발생")
            except ValueError:
                print("잘못 입력하였습니다.")

        # 선택 1-2
        if choice1_1 == '1':
            time.sleep(0.3)
            print(f'당신은 {pet.name}을 관찰하고 있습니다.')
            print("-" * 50)
            time.sleep(0.3)

            print(f'{pet.name}은 당신을 경계하고 있는 중입니다.')
            print("-" * 50)
            time.sleep(0.3)

            for i in range(100, -1, -1):  # 100부터 0까지
                print('\r경계 게이지 : {0} {1}%'.format('█' * (i // 5), i), end='')
                time.sleep(0.1)
            print("")
            print("-" * 50)
            print(f'{pet.name}은 당신에게 경계를 풀고 주인으로 인식 하는것 같다.')
            print("-" * 50)

            for i in range(101):  # 0부터 100까지
                print('\r인식 게이지 : {0} {1}%'.format('█' * (i // 4), i), end='')
                time.sleep(0.2)
            print("")
            print("-" * 50)
            print(f' {pet.name}은 당신을 주인으로 생각하는 것 같다. ')
            print("-" * 50)
            break


        elif choice1_1 == '2':
            time.sleep(0.3)
            print(f'당신은 {pet.name}을 조심스레 만져보기로 했습니다')
            print("-" * 50)
            time.sleep(2)

            print(f'{pet.name}은 당신을 깨물었습니다')
            print("-" * 50)
            time.sleep(2)

            print('아직 당신을 경계 하는것 같습니다.')
            print("-" * 50)
            time.sleep(2)

            print(f'당신은 용기를 내어 다시 조심스럽게 만져보기로 했습니다.')
            print("-" * 50)
            time.sleep(2)

            print(f'{pet.name}은 당신을 경계하고 있지만 깨물지는 않았습니다.')
            print("-" * 50)
            time.sleep(2)

            print(f'당신은 {pet.name}을 용기를 내어 더 열심히 만져보기로 했습니다.')
            print("-" * 50)
            time.sleep(2)

            print(f'{pet.name}은 당신의 손길을 거부하지 않고 받아들이기로 하였습니다.')
            print("-" * 50)
            time.sleep(2)

            for i in range(1, 11):
                print("." * i)
                time.sleep(0.3)

            print("-" * 50)
            print(f'{pet.name}은 당신을 주인으로 받아들이로 한것 같습니다.')
            print("-" * 50)
            time.sleep(1)
            break

    Day += 1
    time.sleep(0.5)

# 계속 진행
while True:
    # 죽음 발생

    #배고픔
    hungryDead()

    #행복도(행복 지수에 따라 이벤트나 죽음 발생)


    #스트레스

    #청결도

    #피로도


    # 하루 경과
    NextDay()
    time.sleep(3)
    Day += 1

    # 선택
    기능선택()

    # 상태 변동
    randomStats()

    # 날짜 변동
    calculate_year()

    # 이벤트

    # 친밀도에 따른 이벤트
